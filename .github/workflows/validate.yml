name: I18n Linter
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  linter:
    runs-on: ubuntu-latest
    name: Linter
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v9.3
        with:
          files: |
            .(js|json|jsx|ts|tsx)$

      - name: Node version
        uses: actions/setup-node@v3
        with:
          node-version: 18.12.1

      - name: Install Dependencies
        run: npm ci

      - name: ESLint PR Check
        run: |
          npx eslint \
          --output-file errors_report.json \
          --no-error-on-unmatched-pattern \
          --format json \
          ${{ steps.changed-files.outputs.all_modified_files }}
        continue-on-error: true

      - name: Filter ESLint Errors
        run: |
          # Use jq to filter ESLint errors by 'ruleId'
          jq '[.[] | {filePath: .filePath, messages: [.messages[] | select(.ruleId | contains("custom-rules/"))], errorCount: (.messages | map(select(.ruleId | contains("custom-rules/"))) | length)}]' errors_report.json > eslint_report.json

      - name: Annotate ES lint issues
        uses: ataylorme/eslint-annotate-action@v2
        id: eslint-annotator
        with:
          report-json: "eslint_report.json"
          check-name: "Eslint Report"

      - name: Check ESLint Report for Errors
        id: eslint-check
        run: |
          # Read the content of filtered_eslint_report.json
          report_contents=$(cat filtered_eslint_report.json)

          # Check if the report_contents contain any errors
          if [[ $report_contents == *"errorCount\": 0"* ]]; then
            echo "No ESLint errors found in filtered report."
            echo "::set-output name=has_errors::false"
          else
            echo "ESLint errors found in filtered report."
            echo "::set-output name=has_errors::true"
          fi
        shell: bash

  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: linter
    if: failure() && steps.linter.outputs.has_errors == 'true'
    steps:
      - name: Send a slack alert to I18N team
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":error: *Urgent Alert!* :error:"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":exclamation: *Pull Request:* ${{ github.event.pull_request.title }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":bust_in_silhouette: *Author:* *<${{ github.event.pull_request.user.html_url }}|${{ github.event.pull_request.user.login }}>*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":construction: *Status:* Open"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":fire: *Message:*\n Some errors has been found, requesting a review from @internationalization-fe"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":link: *PR URL:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


